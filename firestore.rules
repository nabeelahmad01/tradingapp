rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isAdmin() {
      return isSignedIn() && (
        request.auth.token.role == 'admin' ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }
    function isOwner(uid) { return isSignedIn() && request.auth.uid == uid; }

    match /users/{uid} {
      allow read: if isOwner(uid) || isAdmin();
      // Owners can update their own document EXCEPT sensitive balances.
      // Admin can write all fields.
      allow write: if isAdmin() || (
        isOwner(uid) &&
        // Prevent client from changing sensitive balance fields
        (
          // If the doc exists, require these fields to remain unchanged
          (exists(/databases/$(database)/documents/users/$(uid)) &&
            request.resource.data.realBalance == resource.data.realBalance &&
            request.resource.data.escrowBalance == resource.data.escrowBalance
          ) ||
          // If creating a new doc, force balances to be zero or undefined
          (!exists(/databases/$(database)/documents/users/$(uid)) &&
            (request.resource.data.realBalance == null || request.resource.data.realBalance == 0) &&
            (request.resource.data.escrowBalance == null || request.resource.data.escrowBalance == 0)
          )
        )
      );
    }

    match /deposits/{doc} {
      allow create: if isSignedIn();
      allow read: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
      allow update: if isAdmin();
      allow delete: if false;
    }

    match /withdrawals/{doc} {
      allow create: if isSignedIn();
      allow read: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
      allow update: if isAdmin();
      allow delete: if false;
    }

    match /news/{doc} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /notifications/{doc} {
      allow read, write: if isAdmin() || (isSignedIn() && resource.data.targetUid == request.auth.uid);
    }

    // Trading collections
    match /trades/{doc} {
      // Create trade only for self
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      // Read own trades or admin can read all
      allow read: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
      allow update, delete: if false;
    }

    match /tradeHistory/{doc} {
      // Trade results written by app for the signed-in user
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow read: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
      allow update, delete: if false;
    }

    // Platform config
    match /config/{doc} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // User Payment Methods
    match /paymentMethods/{doc} {
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow read: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
      allow update, delete: if isSignedIn() && resource.data.uid == request.auth.uid;
    }

    // P2P Listings (publicly readable, owner editable)
    match /p2p_listings/{doc} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.uid == request.auth.uid;
    }

    // P2P Orders (only participants can read/update)
    match /p2p_orders/{doc} {
      // Create if the requester is either the buyer or the seller on the order
      allow create: if isSignedIn() && (
        request.resource.data.buyerUid == request.auth.uid ||
        request.resource.data.sellerUid == request.auth.uid
      );
      // Read for participants or admin
      allow read: if isAdmin() || (isSignedIn() && (
        resource.data.buyerUid == request.auth.uid ||
        resource.data.sellerUid == request.auth.uid
      ));
      // Update status with basic state checks
      allow update: if isSignedIn() && (
        // Buyer can mark paid from pending_payment -> paid
        (
          resource.data.buyerUid == request.auth.uid &&
          resource.data.status == 'pending_payment' &&
          request.resource.data.status == 'paid'
        ) ||
        // Seller can release from paid -> released
        (
          resource.data.sellerUid == request.auth.uid &&
          resource.data.status == 'paid' &&
          request.resource.data.status == 'released'
        ) ||
        // Either party can cancel while pending_payment
        (
          (resource.data.buyerUid == request.auth.uid || resource.data.sellerUid == request.auth.uid) &&
          resource.data.status == 'pending_payment' &&
          request.resource.data.status == 'cancelled'
        )
      );
      allow delete: if false;
    }

    // Internal Transfers (server only via Admin SDK)
    match /internalTransfers/{doc} {
      allow read, write: if false; // handled by Netlify functions
    }

    // Transfer history (server only)
    match /transfersHistory/{doc} {
      allow read, write: if false;
    }

    // Email OTP storage (server only)
    match /emailOtps/{doc} {
      allow read, write: if false;
    }
  }
}
